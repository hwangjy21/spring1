package com.ezen.myProject.handler;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.multipart;

import java.io.File;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;

import com.ezen.myProject.domain.FileVO;

import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@AllArgsConstructor
@Component
public class FileHandler {

	// 내 파일에 기본 경로 설정
	private final String UP_DIR = "D:\\_myweb_h\\_java\\fileupload";

	public List<FileVO> uploadFiles(MultipartFile[] files) {
		// 멀티파트 파일 객체를 받아서 fileVO 형태로 저장 한 후
		// 오늘 날짜 경로(가변형태로 생성)/ 실제 파일을 해당 경로에 저장
		// fileVO를 List 에 추가 => return list;

		// 오늘 날짜 경로 생성

		LocalDate date = LocalDate.now();
		log.info(">>>date>>" + date);
		String today = date.toString(); // 2023-10-23 String으로 변환
		// 2023\\10\\13 String 생성
		today = today.replace("-", File.separator);
		// 오늘 날짜(today)의 폴더 구성
		File folders = new File(UP_DIR, today);
		if (!folders.exists()) {
			folders.mkdirs(); // 폴더 생성 명령(각 객체마다 폴더를 만들어야 하므로 s를 붙여야 한다)

		}

		// 리스트 설정
		List<FileVO> flist = new ArrayList<FileVO>();

		// 여러개의 파일들 중 순서대로 하나의 파일 가져옴
		for (MultipartFile file : files) {
			FileVO fvo = new FileVO();
			fvo.setSave_dir(today); // 공통 뒤쪽 오늘날짜 경로만 set
			fvo.setFile_size(file.getSize()); // 파일 사이즈는 return Long
			// 파일 이름 설정(OriginalFilename() 설정)
			// OriginalFilename : 파일 경로를 포함하고 있을 수 있음.
			log.info(">>>>>getName>>" + file.getName());
			log.info(">>>>>oriName>>" + file.getOriginalFilename());

			String originalFilename = file.getOriginalFilename();
			String onlyFilename = originalFilename.substring(originalFilename.lastIndexOf(File.separator) + 1); // 실
																												// 파일명만
																												// 추출

			log.info(">>>>>onlyFilename>>>>>" + onlyFilename);
			fvo.setFile_name(onlyFilename);

			// UUID 생성

			UUID uuid = UUID.randomUUID();
			log.info(">>>>>uuid>>"+uuid.toString());
			
			fvo.setUuid(uuid.toString()); //uuid는 uuid 의 객체이므로 .toSting 변경후 저장
			//-> 여기까지 fvo 설정 완료 fvo setting
			
			//디스크에 저장한 파일 객체 생성 -> 저장

		}

		// 두번째 글자는 소문자로

		return flist;
	}
}
