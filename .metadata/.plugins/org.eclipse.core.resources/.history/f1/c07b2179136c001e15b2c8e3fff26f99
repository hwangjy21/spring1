package com.ezen.myProject.controller;

import java.util.List;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.ibatis.annotations.Delete;
import org.apache.tika.mime.MediaType;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.Mapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.ezen.myProject.domain.BoardDTO;
import com.ezen.myProject.domain.BoardVO;
import com.ezen.myProject.domain.FileVO;
import com.ezen.myProject.domain.PagingVO;
import com.ezen.myProject.handler.FileHandler;
import com.ezen.myProject.handler.PagingHandler;
import com.ezen.myProject.service.BoardService;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequestMapping("/board/*")
@Controller
public class BoardController {

	@Inject
	private BoardService bsv;

	@Inject
	private FileHandler fhd;

	@GetMapping("/register")
	public String boardRegisterGet() {
		return "/board/register";
	}

//	@PostMapping("/register")
//	public String register(BoardVO bvo) {
//		log.info(">>>>>"+bvo.toString());
//		int isOk = bsv.register(bvo);
//		log.info(">>>> board register >> "+(isOk>0? "OK":"FAIL"));
//		return "redirect:/board/list";
//	}

	// required(필수여부)=false : 해당 파라미터가 없어도 예외가 발생하지 않음.
	@PostMapping("/register")
	public String register(BoardVO bvo, @RequestParam(name = "files", required = false) MultipartFile[] files) {
		log.info(">>>> bvo >> " + bvo.toString());
		log.info(">>>> files >> " + files.toString());
//		int isOk = bsv.register(bvo);
		List<FileVO> flist = null;

		// files 가 null일수 있음. 첨부파일이 있을 경우에만 fhd 호출
		if (files[0].getSize() > 0) {

			// 첫번째 파일의 size가 0보다 크다면
			// flist에 파일 객체 담기
			flist = fhd.uploadFiles(files);
			log.info("제발ㅎㅎ");
		} else {
			log.info("file null");
		}

		BoardDTO bdto = new BoardDTO(bvo, flist);
		int isOk = bsv.register(bdto);
		// flist에 파일 객체 담기

		flist = fhd.uploadFiles(files);

//		log.info(">>>> board register >> "+(isOk>0? "OK":"FAIL"));
		return "redirect:/board/list";
	}

	@GetMapping("/list")
	public String list(Model model, PagingVO pgvo, FileVO fvo, BoardVO bvo) {
		log.info(">>>> PagingVO >>> " + pgvo);
		// getList(pgvo); 수정
		List<BoardVO> list = bsv.getList(pgvo);
		// log.info(">>> getList >>"+list.get(0));
		model.addAttribute("list", list);
		int totalCount = bsv.getTotalCount(pgvo); // 등록
		PagingHandler ph = new PagingHandler(pgvo, totalCount);
		model.addAttribute("ph", ph);
		
	
		 

		
		return "/board/list";
	}

	@GetMapping({ "/detail", "/modify" })
	public void detail(Model model, @RequestParam("bno") int bno) {
		log.info(">>>> detail bno >> " + bno);
// 파일 내용도 포함해서 같이 가져가야 함.
		/* BoardVO bvo = bsv.getDetail(bno); */
		BoardDTO bdto = bsv.getDetailFile(bno);
		model.addAttribute("boardDto", bdto);
	}

	@PostMapping("/modify")
	public String modify(BoardVO bvo, RedirectAttributes reAttr) {
		log.info(">>>> modify bvo >> " + bvo);
		int isOk = bsv.modify(bvo);
		log.info(">>>> board modify >> " + (isOk > 0 ? "OK" : "FAIL"));
		return "redirect:/board/detail?bno=" + bvo.getBno();
	}

	@GetMapping("/remove")
	public String remove(@RequestParam("bno") int bno, RedirectAttributes reAttr) {
		log.info(">>>> remove bno >> " + bno);
		int isOk = bsv.remove(bno);
		reAttr.addFlashAttribute("isOk", isOk);
		return "redirect:/board/list";
	}
	
	
	@DeleteMapping(value = ""/{uuid}",produces = MediaType.TEXT_PLAIN_VALUE )
	public ResponseEntity<String> removeFile(@PathVariable("uuid") String uuid) {
	 
		//변수를 추출하고 이 값을 메서드에서 사용해야하기 때문
	
		log.info(" >>>> uuid  >> "+uuid);
		/* HttpSession ses = req.getSession(); */
		int isOk=0;
		
				BoardDTO bdto = bsv.getDetailFile_d(uuid);
				if(bdto!=null&& bdto.getBvo().equals(uuid)) {
					isOk = bsv.delete(uuid);
			}
				return isOk > 0? new ResponseEntity<String>("1", HttpStatus.OK)
				: new ResponseEntity<String>("0", HttpStatus.INTERNAL_SERVER_ERROR);
	}

}
